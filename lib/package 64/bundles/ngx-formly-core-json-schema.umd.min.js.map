{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/json-schema/formly-json-schema.service.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__read","o","m","Symbol","iterator","r","ar","next","done","push","value","error","isEmpty","v","undefined","isObject","Array","isArray","isConst","schema","enum","totalMatchedFields","field","fieldGroup","key","getFieldValue","total","reduce","f","fieldArray","FormlyJsonschema","toFieldConfig","options","_toFieldConfig","_a","_this_1","resolveSchema","type","guessType","defaultValue","default","templateOptions","label","title","readonly","readOnly","description","ignoreDefault","disabled","resetOnHide","strict","addValidator","c","isInteger","Number","Math","floor","shareFormControl","parsers","min","minimum","max","maximum","exclusiveMinimum","exclusiveMaximum","step","multipleOf","multiplier","pow","decimalPlaces","a","isFinite","round","schemaType","forEach","prop","_b","resolveDependencies","propDeps_1","schemaDeps_1","keys","properties","property","required","expressionProperties","templateOptions.required","parent","model","some","k","oneOfSchema","oneOf","every","oneOfSchemaItem","constSchema","hideExpression","const","resolveMultiSchema","anyOf","minItems","maxItems","uniqueItems","from","Set","map","JSON","stringify","items","isEnum","_this_2","defineProperty","get","removable","additionalItems","enumerable","configurable","multiple","toEnumOptions","formlyConfig","mergeFields","$ref","resolveDefinition","allOf","resolveAllOf","baseSchema","Error","base","__spread","concat","reverseDeepMerge","mode","schemas","hooks","onInit","formControl","valueChanges","pipe","tap","_checkField","fs","forceUpdate","control","isFieldValid","sort","_c","f1","f1Valid","_d","f2","f2Valid","matchedFields1","matchedFields2","definedValue","filter","setValue","split","uri","pointer","definition","def","path","annotation","deps","schemaDeps","dependencies","dependency","dep","name","validator","validators","toEnum","option","root","writable","clone","_buildField","FormArray","FormGroup","valid","Injectable","args","providedIn"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { JSONSchema7, JSONSchema7TypeName } from 'json-schema';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\nimport {\n  ÉµreverseDeepMerge as reverseDeepMerge,\n  ÉµgetFieldValue as getFieldValue,\n  Éµclone as clone,\n} from '@ngx-formly/core';\nimport { tap } from 'rxjs/operators';\n\nexport interface FormlyJsonschemaOptions {\n  /**\n   * allows to intercept the mapping, taking the already mapped\n   * formly field and the original JSONSchema source from which it\n   * was mapped.\n   */\n  map?: (mappedField: FormlyFieldConfig, mapSource: JSONSchema7) => FormlyFieldConfig;\n}\n\n// https://stackoverflow.com/a/27865285\nfunction decimalPlaces(a: number) {\n  if (!isFinite(a)) {\n    return 0;\n  }\n\n  let e = 1, p = 0;\n  while (Math.round(a * e) / e !== a) { e *= 10; p++; }\n\n  return p;\n}\n\nfunction isEmpty(v: any) {\n  return v === '' || v === undefined || v === null;\n}\n\nfunction isObject(v: any) {\n  return v != null && typeof v === 'object' && !Array.isArray(v);\n}\n\nfunction isInteger(value: any) {\n  return Number.isInteger ? Number.isInteger(value) : typeof value === 'number' && Math.floor(value) === value;\n}\n\nfunction isConst(schema: JSONSchema7) {\n  return schema.hasOwnProperty('const') || (schema.enum && schema.enum.length === 1);\n}\n\nfunction totalMatchedFields(field: FormlyFieldConfig): number {\n  if (!field.fieldGroup) {\n    return field.key && getFieldValue(field) !== undefined ? 1 : 0;\n  }\n\n  const total = field.fieldGroup.reduce((s, f) => totalMatchedFields(f) + s, 0);\n  if (total === 0 && field.key) {\n    const value = getFieldValue(field);\n    if (\n      value === null\n      || (\n        (value !== undefined)\n        && (\n          (field.fieldArray && Array.isArray(value))\n          || (!field.fieldArray && isObject(value))\n        )\n      )\n    ) {\n      return 1;\n    }\n  }\n\n  return total;\n}\n\ninterface IOptions extends FormlyJsonschemaOptions {\n  schema: JSONSchema7;\n  resetOnHide?: boolean;\n  shareFormControl?: boolean;\n  ignoreDefault?: boolean;\n  strict?: boolean;\n  readOnly?: boolean;\n  key?: FormlyFieldConfig['key'];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyJsonschema {\n  toFieldConfig(schema: JSONSchema7, options?: FormlyJsonschemaOptions): FormlyFieldConfig {\n    return this._toFieldConfig(schema, { schema, ...(options || {}) });\n  }\n\n  private _toFieldConfig(schema: JSONSchema7, { key, ...options }: IOptions): FormlyFieldConfig {\n    schema = this.resolveSchema(schema, options);\n\n    let field: FormlyFieldConfig = {\n      type: this.guessType(schema),\n      defaultValue: schema.default,\n      templateOptions: {\n        label: schema.title,\n        readonly: schema.readOnly,\n        description: schema.description,\n      },\n    };\n\n    if (key != null) {\n      field.key = key;\n    }\n\n    if (!options.ignoreDefault && (schema.readOnly || options.readOnly)) {\n      field.templateOptions.disabled = true;\n      options = { ...options, readOnly: true };\n    }\n\n    if (options.resetOnHide) {\n      field['resetOnHide'] = true;\n    }\n\n    if (key && options.strict) {\n      this.addValidator(field, 'type', (c, f) => {\n        const value = getFieldValue(f);\n        if (value != null) {\n          switch (field.type) {\n            case 'string': {\n              return typeof value === 'string';\n            }\n            case 'integer': {\n              return isInteger(value);\n            }\n            case 'number': {\n              return typeof value === 'number';\n            }\n            case 'object': {\n              return isObject(value);\n            }\n            case 'array': {\n              return Array.isArray(value);\n            }\n          }\n        }\n\n        return true;\n      });\n    }\n\n    if (options.shareFormControl === false) {\n      field['shareFormControl'] = false;\n    }\n\n    if (options.ignoreDefault) {\n      delete field.defaultValue;\n    }\n\n    switch (field.type) {\n      case 'null': {\n        this.addValidator(field, 'null', ({ value }) => value === null);\n        break;\n      }\n      case 'number':\n      case 'integer': {\n        field.parsers = [v => isEmpty(v) ? (v === '' ? null : v) : Number(v)];\n        if (schema.hasOwnProperty('minimum')) {\n          field.templateOptions.min = schema.minimum;\n        }\n\n        if (schema.hasOwnProperty('maximum')) {\n          field.templateOptions.max = schema.maximum;\n        }\n\n        if (schema.hasOwnProperty('exclusiveMinimum')) {\n          field.templateOptions.exclusiveMinimum = schema.exclusiveMinimum;\n          this.addValidator(field, 'exclusiveMinimum', ({ value }) => isEmpty(value) || (value > schema.exclusiveMinimum));\n        }\n\n        if (schema.hasOwnProperty('exclusiveMaximum')) {\n          field.templateOptions.exclusiveMaximum = schema.exclusiveMaximum;\n          this.addValidator(field, 'exclusiveMaximum', ({ value }) => isEmpty(value) || (value < schema.exclusiveMaximum));\n        }\n\n        if (schema.hasOwnProperty('multipleOf')) {\n          field.templateOptions.step = schema.multipleOf;\n          this.addValidator(field, 'multipleOf', ({ value }) => {\n            if (isEmpty(value) || typeof value !== 'number' || value === 0 || schema.multipleOf <= 0) {\n              return true;\n            }\n\n            // https://github.com/ajv-validator/ajv/issues/652#issue-283610859\n            const multiplier = Math.pow(10, decimalPlaces(schema.multipleOf));\n            return Math.round(value * multiplier) % Math.round(schema.multipleOf * multiplier) === 0;\n          });\n        }\n        break;\n      }\n      case 'string': {\n        const schemaType = schema.type as JSONSchema7TypeName;\n        if (Array.isArray(schemaType) && (schemaType.indexOf('null') !== -1)) {\n          field.parsers = [v => isEmpty(v) ? null : v];\n        }\n\n        ['minLength', 'maxLength', 'pattern'].forEach(prop => {\n          if (schema.hasOwnProperty(prop)) {\n            field.templateOptions[prop] = schema[prop];\n          }\n        });\n        break;\n      }\n      case 'object': {\n        if (!field.fieldGroup) {\n          field.fieldGroup = [];\n        }\n\n        const [propDeps, schemaDeps] = this.resolveDependencies(schema);\n        Object.keys(schema.properties || {}).forEach(property => {\n          const f = this._toFieldConfig(<JSONSchema7> schema.properties[property], { ...options, key: property });\n          field.fieldGroup.push(f);\n          if (\n            (Array.isArray(schema.required) && schema.required.indexOf(property) !== -1)\n            || propDeps[property]\n          ) {\n            f.expressionProperties = {\n              ...(f.expressionProperties || {}),\n              'templateOptions.required': (m, s, f) => {\n                let parent = f.parent;\n                const model = f.fieldGroup && f.key != null ? parent.model : f.model;\n                while (parent.key == null && parent.parent) {\n                  parent = parent.parent;\n                }\n\n                const required = parent && parent.templateOptions ? parent.templateOptions.required : false;\n                if (!model && !required) {\n                  return false;\n                }\n\n                if (Array.isArray(schema.required) && schema.required.indexOf(property) !== -1) {\n                  return true;\n                }\n\n                return propDeps[property] && (m && propDeps[property].some(k => !isEmpty(m[k])));\n              },\n            };\n          }\n\n          if (schemaDeps[property]) {\n            const getConstValue = (s: JSONSchema7) => {\n              return s.hasOwnProperty('const') ? s.const : s.enum[0];\n            };\n\n            const oneOfSchema = schemaDeps[property].oneOf;\n            if (\n              oneOfSchema\n              && oneOfSchema.every(o => o.properties && o.properties[property] && isConst(o.properties[property]))\n            ) {\n              oneOfSchema.forEach(oneOfSchemaItem => {\n                const { [property]: constSchema, ...properties } = oneOfSchemaItem.properties;\n                field.fieldGroup.push({\n                  ...this._toFieldConfig({ ...oneOfSchemaItem, properties }, { ...options, resetOnHide: true }),\n                  hideExpression: m => !m || getConstValue(constSchema) !== m[property],\n                });\n              });\n            } else {\n              field.fieldGroup.push({\n                ...this._toFieldConfig(schemaDeps[property], options),\n                hideExpression: m => !m || isEmpty(m[property]),\n              });\n            }\n\n          }\n        });\n\n        if (schema.oneOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'oneOf',\n            <JSONSchema7[]> schema.oneOf,\n            { ...options, shareFormControl: false },\n          ));\n        }\n\n        if (schema.anyOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'anyOf',\n            <JSONSchema7[]> schema.anyOf,\n            options,\n          ));\n        }\n        break;\n      }\n      case 'array': {\n        if (schema.hasOwnProperty('minItems')) {\n          field.templateOptions.minItems = schema.minItems;\n          this.addValidator(field, 'minItems', ({ value }) => isEmpty(value) || (value.length >= schema.minItems));\n        }\n        if (schema.hasOwnProperty('maxItems')) {\n          field.templateOptions.maxItems = schema.maxItems;\n          this.addValidator(field, 'maxItems', ({ value }) => isEmpty(value) || (value.length <= schema.maxItems));\n        }\n        if (schema.hasOwnProperty('uniqueItems')) {\n          field.templateOptions.uniqueItems = schema.uniqueItems;\n          this.addValidator(field, 'uniqueItems', ({ value }) => {\n            if (isEmpty(value) || !schema.uniqueItems) {\n              return true;\n            }\n\n            const uniqueItems = Array.from(\n              new Set(value.map((v: any) => JSON.stringify(v))),\n            );\n\n            return uniqueItems.length === value.length;\n          });\n        }\n\n        // resolve items schema needed for isEnum check\n        if (schema.items && !Array.isArray(schema.items)) {\n          schema.items = this.resolveSchema(<JSONSchema7> schema.items, options);\n        }\n\n        // TODO: remove isEnum check once adding an option to skip extension\n        if (!this.isEnum(schema)) {\n          const _this = this;\n          Object.defineProperty(field, 'fieldArray', {\n            get: function () {\n              if (schema.items && !Array.isArray(schema.items)) {\n                // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                return _this._toFieldConfig(<JSONSchema7> schema.items, options);\n              }\n\n              const length = this.fieldGroup ? this.fieldGroup.length : 0;\n              if (schema.items && schema.items[length]) {\n                const f = _this._toFieldConfig(<JSONSchema7> schema.items[length], { ...options});\n                f.templateOptions.removable = false;\n\n                return f;\n              }\n\n              return schema.additionalItems\n                ? _this._toFieldConfig(<JSONSchema7> schema.additionalItems, options)\n                : {};\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n\n        break;\n      }\n    }\n\n    if (schema.hasOwnProperty('const')) {\n      field.templateOptions.const = schema.const;\n      this.addValidator(field, 'const', ({ value }) => value === schema.const);\n      if (!field.type) {\n        field.defaultValue = schema.const;\n      }\n    }\n\n    if (this.isEnum(schema)) {\n      field.templateOptions.multiple = field.type === 'array';\n      field.type = 'enum';\n      field.templateOptions.options = this.toEnumOptions(schema);\n    }\n\n    if (schema.oneOf && !field.type) {\n      delete field.key;\n      field.fieldGroup = [\n        this.resolveMultiSchema('oneOf', <JSONSchema7[]>schema.oneOf, { ...options, key, shareFormControl: false }),\n      ];\n    }\n\n    // map in possible formlyConfig options from the widget property\n    if (schema['widget'] && schema['widget'].formlyConfig) {\n      field = this.mergeFields(field, schema['widget'].formlyConfig);\n    }\n\n    // if there is a map function passed in, use it to allow the user to\n    // further customize how fields are being mapped\n    return options.map ? options.map(field, schema) : field;\n  }\n\n  private resolveSchema(schema: JSONSchema7, options: IOptions) {\n    if (schema && schema.$ref) {\n      schema = this.resolveDefinition(schema, options);\n    }\n\n    if (schema && schema.allOf) {\n      schema = this.resolveAllOf(schema, options);\n    }\n\n    return schema;\n  }\n\n  private resolveAllOf({ allOf, ...baseSchema }: JSONSchema7, options: IOptions) {\n    if (!allOf.length) {\n      throw Error(`allOf array can not be empty ${allOf}.`);\n    }\n\n    return allOf.reduce((base: JSONSchema7, schema: JSONSchema7) => {\n      schema = this.resolveSchema(schema, options);\n      if (base.required && schema.required) {\n        base.required = [...base.required, ...schema.required];\n      }\n\n      if (schema.uniqueItems) {\n        base.uniqueItems = schema.uniqueItems;\n      }\n\n      // resolve to min value\n      ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      // resolve to max value\n      ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      return reverseDeepMerge(base, schema);\n    }, baseSchema);\n  }\n\n  private resolveMultiSchema(\n    mode: 'oneOf' | 'anyOf',\n    schemas: JSONSchema7[],\n    options: IOptions,\n  ): FormlyFieldConfig {\n    return {\n      type: 'multischema',\n      fieldGroup: [\n        {\n          type: 'enum',\n          defaultValue: -1,\n          templateOptions: {\n            multiple: mode === 'anyOf',\n            options: schemas\n              .map((s, i) => ({ label: s.title, value: i, disabled: s.readOnly })),\n          },\n          hooks: {\n            onInit: f => f.formControl.valueChanges.pipe(\n              tap(() => (f.options as any)._checkField(f.parent)),\n            ),\n          },\n        },\n        {\n          fieldGroup: schemas.map((s, i) => ({\n            ...this._toFieldConfig(s, { ...options, resetOnHide: true }),\n            hideExpression: (m, fs, f, forceUpdate?: boolean) => {\n              const control = f.parent.parent.fieldGroup[0].formControl;\n              if ((control.value === -1) || forceUpdate) {\n                let value = f.parent.fieldGroup\n                  .map((f, i) => [f, i, this.isFieldValid(f, i, schemas, options)] as [FormlyFieldConfig, number, boolean])\n                  .sort(([f1, i1, f1Valid], [f2, i2, f2Valid]) => {\n                    if (f1Valid !== f2Valid) {\n                      return f2Valid ? 1 : -1;\n                    }\n\n                    const matchedFields1 = totalMatchedFields(f1);\n                    const matchedFields2 = totalMatchedFields(f2);\n                    if (matchedFields1 === matchedFields2) {\n                      if (f1.templateOptions.disabled === f2.templateOptions.disabled) {\n                        return 0;\n                      }\n\n                      return f1.templateOptions.disabled ? 1 : -1;\n                    }\n\n                    return matchedFields2 > matchedFields1 ? 1 : -1;\n                  })\n                  .map(([, i]) => i)\n                  ;\n\n                if (mode === 'anyOf') {\n                  const definedValue = value.filter(i => totalMatchedFields(f.parent.fieldGroup[i]));\n                  value = definedValue.length > 0 ? definedValue : [value[0] || 0];\n                }\n\n                value = value.length > 0 ? value : [0];\n                control.setValue(mode === 'anyOf' ? value : value[0]);\n              }\n\n              return Array.isArray(control.value)\n                ? control.value.indexOf(i) === -1\n                : control.value !== i;\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  private resolveDefinition(schema: JSONSchema7, options: IOptions): JSONSchema7 {\n    const [uri, pointer] = schema.$ref.split('#/');\n    if (uri) {\n      throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);\n    }\n\n    const definition = !pointer ? null : pointer.split('/').reduce(\n      (def, path) => def && def.hasOwnProperty(path) ? def[path] : null,\n      options.schema,\n    );\n\n    if (!definition) {\n      throw Error(`Cannot find a definition for ${schema.$ref}.`);\n    }\n\n    if (definition.$ref) {\n      return this.resolveDefinition(definition, options);\n    }\n\n    return {\n      ...definition,\n      ...['title', 'description', 'default', 'widget'].reduce((annotation, p) => {\n        if (schema.hasOwnProperty(p)) {\n          annotation[p] = schema[p];\n        }\n\n        return annotation;\n      }, {}),\n    };\n  }\n\n  private resolveDependencies(schema: JSONSchema7) {\n    const deps = {};\n    const schemaDeps = {};\n\n    Object.keys(schema.dependencies || {}).forEach(prop => {\n      const dependency = schema.dependencies[prop] as JSONSchema7;\n      if (Array.isArray(dependency)) {\n        // Property dependencies\n        dependency.forEach(dep => {\n          if (!deps[dep]) {\n            deps[dep] = [prop];\n          } else {\n            deps[dep].push(prop);\n          }\n        });\n      } else {\n        // schema dependencies\n        schemaDeps[prop] = dependency;\n      }\n    });\n\n    return [deps, schemaDeps];\n  }\n\n  private guessType(schema: JSONSchema7) {\n    const type = schema ? schema.type as JSONSchema7TypeName : null;\n    if (!type && schema && schema.properties) {\n      return 'object';\n    }\n\n    if (Array.isArray(type)) {\n      if (type.length === 1) {\n        return type[0];\n      }\n\n      if (type.length === 2 && type.indexOf('null') !== -1) {\n        return type[type[0] === 'null' ? 1 : 0];\n      }\n    }\n\n    return type;\n  }\n\n  private addValidator(field: FormlyFieldConfig, name: string, validator: (control: AbstractControl, field: FormlyFieldConfig) => boolean) {\n    field.validators = field.validators || {};\n    field.validators[name] = validator;\n  }\n\n  private isEnum(schema: JSONSchema7) {\n    return schema.enum\n      || (schema.anyOf && schema.anyOf.every(isConst))\n      || (schema.oneOf && schema.oneOf.every(isConst))\n      || schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum(<JSONSchema7> schema.items);\n  }\n\n  private toEnumOptions(schema: JSONSchema7) {\n    if (schema.enum) {\n      return schema.enum.map(value => ({ value, label: value }));\n    }\n\n    const toEnum = (s: JSONSchema7) => {\n      const value = s.hasOwnProperty('const') ? s.const : s.enum[0];\n      const option: any = { value: value, label: s.title || value };\n      if (s.readOnly) {\n        option.disabled = true;\n      }\n\n      return option;\n    };\n\n    if (schema.anyOf) {\n      return schema.anyOf.map(toEnum);\n    }\n\n    if (schema.oneOf) {\n      return schema.oneOf.map(toEnum);\n    }\n\n    return this.toEnumOptions(<JSONSchema7> schema.items);\n  }\n\n  private isFieldValid(root: FormlyFieldConfig, i: number, schemas: JSONSchema7[], options: IOptions): boolean {\n    if (!root['_schemasFields']) {\n      Object.defineProperty(root, '_schemasFields', { enumerable: false, writable: true, configurable: true });\n      root['_schemasFields'] = {};\n    }\n\n    let field = root['_schemasFields'][i];\n    const model = root.model ? clone(root.model) : (root.fieldArray ? [] : {});\n    if (!field) {\n      field = root['_schemasFields'][i] = (root.options as any)._buildField({\n        formControl: Array.isArray(model) ? new FormArray([]) : new FormGroup({}),\n        fieldGroup: [this._toFieldConfig(schemas[i], { ...options, resetOnHide: true, ignoreDefault: true, map: null, strict: true })],\n        model,\n        options: {},\n      });\n    } else {\n      field.model = model;\n      (root.options as any)._buildField(field);\n    }\n\n    return field.formControl.valid;\n  }\n\n  private mergeFields(f1: FormlyFieldConfig, f2: FormlyFieldConfig) {\n    for (let prop in f2) {\n      if (isObject(f1[prop]) && isObject(f2[prop])) {\n        f1[prop] = this.mergeFields(f1[prop], f2[prop]);\n      } else if (f2[prop] != null) {\n        f1[prop] = f2[prop];\n      }\n    }\n\n    return f1;\n  }\n}\n"]}